{"version":3,"sources":["components/TaskBox/TaskBox.js","logo.svg","components/TaskItem/TaskItem.js","components/Tasks/Tasks.js","pages/Todo/TodoPage.js","App.js","reportWebVitals.js","index.js"],"names":["TaskBox","placeholder","onEnter","taskText","onTextChange","className","Control","type","maxLength","value","onChange","e","target","onKeyPress","key","length","TaskItem","task","index","onTaskRemove","onTaskSelected","useState","iconButton","setIconButton","ListGroup","Item","action","onMouseOver","onMouseOut","Form","Check","status","label","text","onClick","xmlns","width","height","fill","viewBox","d","ActiveTasks","tasks","variant","map","require","Container","Modal","Button","Navbar","Row","OverlayTrigger","Tooltip","default","Todo","React","setTasks","setText","show","setShow","useEffect","fromStorage","JSON","parse","localStorage","getItem","console","log","removeItem","setItem","stringify","newTask","concat","newText","filter","getTasks","Dialog","Header","closeButton","Title","Body","Footer","slice","newArr","i","changedTask","Brand","Text","Collapse","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71db693e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Form } from 'react-bootstrap';\r\nimport './TaskBox.css'\r\n\r\n\r\nfunction TaskBox({placeholder, onEnter, taskText, onTextChange}) {\r\n    return (\r\n        <Container className=\"c-taskbox\">\r\n            <Form.Control type=\"text\" maxLength={22} placeholder={placeholder} value={taskText} onChange = {e => onTextChange(e.target.value)}\r\n                onKeyPress={e => e.key === 'Enter' && e.target.value.length > 0 ? onEnter(e.target.value) : null}/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TaskBox;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState } from 'react';\r\nimport { Form, ListGroup } from 'react-bootstrap';\r\nimport './TaskItem.css'\r\nfunction TaskItem({task, index, onTaskRemove, onTaskSelected}) {\r\n    const [iconButton, setIconButton] = useState(false);\r\n    return (\r\n        <ListGroup.Item action onMouseOver={() => setIconButton(true)} onMouseOut={() => setIconButton(false)}>\r\n            <Form.Check className={task.status ? \"c-active-task\": \"c-complited-task\"} label={task.text} onClick={() => onTaskSelected(index)} />\r\n            <button type=\"button\" className={iconButton ? \"btn\" : \"btn hide\"} onClick={() => onTaskRemove(index)}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-x text-danger\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\" />\r\n                </svg>\r\n            </button>\r\n        </ListGroup.Item>\r\n    );\r\n    \r\n}\r\n\r\nexport default TaskItem;","import React, { useState } from 'react';\r\nimport { Button, Form, FormControl, InputGroup, ListGroup } from 'react-bootstrap';\r\nimport TaskItem from '../TaskItem/TaskItem';\r\nimport './Tasks.css'\r\n\r\n\r\nfunction ActiveTasks({ tasks, onTaskRemove, onTaskSelected }) {\r\n    return (\r\n        <div className=\"c-task\">\r\n            <ListGroup variant=\"flush\">\r\n                {tasks.map((task, index) =>\r\n                    <TaskItem task={task} index={index} onTaskRemove={onTaskRemove} onTaskSelected={onTaskSelected}></TaskItem>)}\r\n            </ListGroup>\r\n            {/* // getListItem(task, index))} */}\r\n            {/* onMouseOver={() => onTaskRemove(index)}> */}\r\n        </div>\r\n    );\r\n}\r\nexport default ActiveTasks;","import React, { useEffect } from \"react\";\r\nimport Tasks from \"../../components/Tasks/Tasks\";\r\nimport './Todo.css';\r\nconst { Container, Modal, Button, Navbar, Row, OverlayTrigger, Tooltip } = require(\"react-bootstrap\");\r\nconst { default: TaskBox } = require(\"../../components/TaskBox/TaskBox\");\r\n\r\nfunction Todo() {\r\n    const [tasks, setTasks] = React.useState([]); //[{ text: newTask, status: true }, { text: newTask, status: false }...]\r\n    const [text, setText] = React.useState(\"\");//Of tasks Component\r\n    const [show, setShow] = React.useState(\"All\");\r\n    useEffect(() => {\r\n        const fromStorage = JSON.parse(localStorage.getItem('tasks'));\r\n        fromStorage ? setTasks(fromStorage) : console.log(\"No data in local storage\");\r\n    }, []);\r\n    useEffect(() => {\r\n        localStorage.removeItem('tasks');\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    }, [tasks]);\r\n    function handleEnterPressed(newTask) {\r\n        setTasks(tasks => tasks.concat({ text: newTask, status: true }))\r\n        setText(\"\");\r\n    }\r\n    function handleTextChange(newText) {\r\n        setText(newText);\r\n    }\r\n    function markTaskAsComplited(index) {\r\n        //setTasks(tasks => tasks => [...tasks, tasks[index].status]);\r\n        let newArr = tasks.map((task, i) => {\r\n            if (index == i) {\r\n                //return newArr[index].status = false;\r\n                let changedTask = { ...task };\r\n                changedTask.status = !changedTask.status;\r\n                return changedTask;\r\n            } else {\r\n                return task;\r\n            }\r\n        });\r\n        setTasks(newArr);\r\n    }\r\n    function removeTask(index) {\r\n        if (tasks[index].status) {\r\n            return (\r\n                <Modal.Dialog>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Delete Action</Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <p>Are you sure you want to delete your active task?</p>\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\">Close</Button>\r\n                        <Button variant=\"primary\">Yes</Button>\r\n                    </Modal.Footer>\r\n                </Modal.Dialog>\r\n            );\r\n        }\r\n        else {\r\n            setTasks(tasks => tasks.slice(0, index).concat(tasks.slice(index + 1, tasks.length)));\r\n        }\r\n    }\r\n    function getNumOfActiveTasks() {\r\n        return tasks.filter(task => task.status).length;\r\n        //return activeTasksNum ? activeTasksNum + \" items left\" : \"\";\r\n    }\r\n    // function setShowStatus(status) {\r\n    //     setShow(status);\r\n    // }\r\n    function getTasks() {\r\n        switch (show) {\r\n            case \"All\":\r\n                return tasks;\r\n            case \"Active\":\r\n                return tasks.filter(task => task.status);\r\n            case \"Complite\":\r\n                return tasks.filter(task => !task.status);\r\n        }\r\n    }\r\n    function cleanAll() {\r\n        setTasks([]);\r\n        localStorage.removeItem('tasks');\r\n    }\r\n    return (\r\n        <div className=\"p-todo\">\r\n            <Container >\r\n                <h1 className=\"display-1\">Todos</h1>\r\n                <TaskBox placeholder=\"Add task ... (to finish press enter)\" onEnter={handleEnterPressed} taskText={text} onTextChange={handleTextChange}></TaskBox>\r\n                <Tasks tasks={getTasks()} onTaskRemove={removeTask} onTaskSelected={markTaskAsComplited}></Tasks>\r\n                {/* <ComplitedTasks tasks={complitedTasks} onTaskRemove={removeTaskFromActive} onTaskSelected={markTaskAsComplited}></ComplitedTasks> */}\r\n            </Container>\r\n            <Navbar className={tasks.length == 0 ? \"hide\" : \"\"}>\r\n                <Navbar.Brand>{getNumOfActiveTasks()} items left</Navbar.Brand>\r\n                <Navbar.Text>\r\n                    {/* <button type=\"button\" className=\"btn\" onClick={() => cleanAll()}>\r\n                        <OverlayTrigger overlay={<Tooltip id=\"tooltip-clean\">clean all list</Tooltip>}>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-trash\" viewBox=\"0 0 16 16\">\r\n                                <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                                <path fill-rule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\" />\r\n                            </svg>\r\n                        </OverlayTrigger>\r\n                    </button>    */}\r\n                </Navbar.Text>\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    <Navbar.Text className={show === \"All\" ? \"nav-filter marked\" : \"nav-filter\"} onClick={() => setShow(\"All\")}>All</Navbar.Text>\r\n                    <Navbar.Text className={show === \"Active\" ? \"nav-filter marked\" : \"nav-filter\"} onClick={() => setShow(\"Active\")}>Active</Navbar.Text>\r\n                    <Navbar.Text className={show === \"Complite\" ? \"nav-filter marked\" : \"nav-filter\"} onClick={() => setShow(\"Complite\")}>Complite</Navbar.Text>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import logo from './logo.svg';\nimport './App.css';\nimport { Container } from 'react-bootstrap';\nimport Todo from './pages/Todo/TodoPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Todo></Todo>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}