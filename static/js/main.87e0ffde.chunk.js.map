{"version":3,"sources":["components/TaskBox/TaskBox.js","logo.svg","components/TaskItem/TaskItem.js","components/Tasks/Tasks.js","pages/Todo/TodoPage.js","App.js","reportWebVitals.js","index.js"],"names":["TaskBox","placeholder","onEnter","taskText","onTextChange","className","Control","type","minlength","value","onChange","e","target","onKeyPress","key","TaskItem","task","index","onTaskRemove","onTaskSelected","useState","iconButton","setIconButton","ListGroup","Item","action","onMouseOver","onMouseOut","Form","Check","status","label","text","onClick","class","xmlns","width","height","fill","viewBox","d","ActiveTasks","tasks","variant","map","require","Container","Modal","Button","Navbar","Row","default","Todo","React","setTasks","setText","show","setShow","useEffect","fromStorage","JSON","parse","localStorage","getItem","console","log","removeItem","setItem","stringify","newTask","concat","newText","filter","getTasks","Dialog","Header","closeButton","Title","Body","Footer","slice","length","newArr","i","changedTask","Brand","Collapse","Text","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87e0ffde.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Form } from 'react-bootstrap';\r\nimport './TaskBox.css'\r\n\r\n\r\nfunction TaskBox({placeholder, onEnter, taskText, onTextChange}) {\r\n    return (\r\n        <Container className=\"c-taskbox\">\r\n            <Form.Control type=\"text\" minlength=\"5\" placeholder={placeholder} value={taskText} onChange = {e => onTextChange(e.target.value)}\r\n                onKeyPress={e => e.key === 'Enter' ? onEnter(e.target.value) : null}/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TaskBox;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState } from 'react';\r\nimport { Form, ListGroup } from 'react-bootstrap';\r\nimport './TaskItem.css'\r\nfunction TaskItem({task, index, onTaskRemove, onTaskSelected}) {\r\n    const [iconButton, setIconButton] = useState(false);\r\n    return (\r\n        <ListGroup.Item action onMouseOver={() => setIconButton(true)} onMouseOut={() => setIconButton(false)}>\r\n            <Form.Check className={task.status ? \"c-active-task\": \"c-complited-task\"} label={task.text} onClick={() => onTaskSelected(index)} />\r\n            <button type=\"button\" class={iconButton ? \"btn\" : \"btn hide\"} onClick={() => onTaskRemove(index)}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x text-danger\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\" />\r\n                </svg>\r\n            </button>\r\n        </ListGroup.Item>\r\n    );\r\n    \r\n}\r\n\r\nexport default TaskItem;","import React, { useState } from 'react';\r\nimport { Button, Form, FormControl, InputGroup, ListGroup } from 'react-bootstrap';\r\nimport TaskItem from '../TaskItem/TaskItem';\r\nimport './Tasks.css'\r\n\r\n\r\nfunction ActiveTasks({ tasks, onTaskRemove, onTaskSelected }) {\r\n    return (\r\n        <div className=\"c-task\">\r\n            <ListGroup variant=\"flush\">\r\n                {tasks.map((task, index) =>\r\n                    <TaskItem task={task} index={index} onTaskRemove={onTaskRemove} onTaskSelected={onTaskSelected}></TaskItem>)}\r\n            </ListGroup>\r\n            {/* // getListItem(task, index))} */}\r\n            {/* onMouseOver={() => onTaskRemove(index)}> */}\r\n        </div>\r\n    );\r\n}\r\nexport default ActiveTasks;","import React, { useEffect } from \"react\";\r\nimport Tasks from \"../../components/Tasks/Tasks\";\r\nimport './Todo.css';\r\nconst { Container, Modal, Button, Navbar, Row } = require(\"react-bootstrap\");\r\nconst { default: TaskBox } = require(\"../../components/TaskBox/TaskBox\");\r\n\r\nfunction Todo() {\r\n    const [tasks, setTasks] = React.useState([]); //[{ text: newTask, status: true }, { text: newTask, status: false }...]\r\n    const [text, setText] = React.useState(\"\");//Of tasks Component\r\n    const [show, setShow] = React.useState(\"All\");\r\n    useEffect(() => {\r\n        const fromStorage = JSON.parse(localStorage.getItem('tasks'));\r\n        fromStorage ? setTasks(fromStorage) : console.log(\"No data in local storage\");\r\n    }, []);\r\n    useEffect(() => {\r\n        localStorage.removeItem('tasks');\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    }, [tasks]);\r\n    function handleEnterPressed(newTask) {\r\n        setTasks(tasks => tasks.concat({ text: newTask, status: true }))\r\n        setText(\"\");\r\n    }\r\n    function handleTextChange(newText) {\r\n        setText(newText);\r\n    }\r\n    function markTaskAsComplited(index) {\r\n        //setTasks(tasks => tasks => [...tasks, tasks[index].status]);\r\n        let newArr = tasks.map((task, i) => {\r\n            if (index == i) {\r\n                //return newArr[index].status = false;\r\n                let changedTask = { ...task };\r\n                changedTask.status = !changedTask.status;\r\n                return changedTask;\r\n            } else {\r\n                return task;\r\n            }\r\n        });\r\n        setTasks(newArr);\r\n    }\r\n    function removeTask(index) {\r\n        if (tasks[index].status) {\r\n            return (\r\n                <Modal.Dialog>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Delete Action</Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <p>Are you sure you want to delete your active task?</p>\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\">Close</Button>\r\n                        <Button variant=\"primary\">Yes</Button>\r\n                    </Modal.Footer>\r\n                </Modal.Dialog>\r\n            );\r\n        }\r\n        else {\r\n            setTasks(tasks => tasks.slice(0, index).concat(tasks.slice(index + 1, tasks.length)));\r\n        }\r\n    }\r\n    function getNumOfActiveTasks() {\r\n        return tasks.filter(task => task.status).length;\r\n        //return activeTasksNum ? activeTasksNum + \" items left\" : \"\";\r\n    }\r\n    // function setShowStatus(status) {\r\n    //     setShow(status);\r\n    // }\r\n    function getTasks() {\r\n        switch(show) {\r\n            case \"All\":\r\n                return tasks;\r\n            case \"Active\":\r\n                return tasks.filter(task => task.status);\r\n            case \"Complite\":\r\n                return tasks.filter(task => !task.status); \r\n        }\r\n    }\r\n    return (\r\n        <div className=\"p-todo\">\r\n            <Container >\r\n                <h1 className=\"display-1\">Todos</h1>\r\n                <TaskBox placeholder=\"Add task ... (to finish press enter)\" onEnter={handleEnterPressed} taskText={text} onTextChange={handleTextChange}></TaskBox>\r\n                <Tasks tasks={getTasks()} onTaskRemove={removeTask} onTaskSelected={markTaskAsComplited}></Tasks>\r\n                {/* <ComplitedTasks tasks={complitedTasks} onTaskRemove={removeTaskFromActive} onTaskSelected={markTaskAsComplited}></ComplitedTasks> */}\r\n            </Container>\r\n            <Navbar className={tasks.length == 0 ? \"hide\" : \"\"}>\r\n                <Navbar.Brand>{getNumOfActiveTasks()} items left</Navbar.Brand>\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    <Navbar.Text className={show === \"All\" ? \"nav-filter marked\" : \"nav-filter\"} onClick={() => setShow(\"All\")}>All</Navbar.Text>\r\n                    <Navbar.Text className={show === \"Active\" ? \"nav-filter marked\" : \"nav-filter\"} onClick={() => setShow(\"Active\")}>Active</Navbar.Text>\r\n                    <Navbar.Text className={show === \"Complite\" ? \"nav-filter marked\" : \"nav-filter\"} onClick={() => setShow(\"Complite\")}>Complite</Navbar.Text>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import logo from './logo.svg';\nimport './App.css';\nimport { Container } from 'react-bootstrap';\nimport Todo from './pages/Todo/TodoPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Todo></Todo>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}